/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.mitre.opensextant.desktop.ui.forms;

import java.io.BufferedReader;
import java.io.FileReader;

import javax.swing.ImageIcon;
import javax.swing.SwingWorker;
import javax.swing.text.DefaultCaret;

import org.apache.commons.io.IOUtils;

/**
 *
 * @author RTWARNER
 */
@SuppressWarnings("serial")
public class LogFrame extends javax.swing.JFrame {

    String logFileLocation = System.getProperty("user.home") + "\\Documents\\OpenSextant\\OpenSextantDesktop.log";
    String aux = "";
    
    /**
     * Creates new form LogFrame
     */
    public LogFrame() {
        initComponents();
        
        DefaultCaret logTextCaret = (DefaultCaret)logJTextArea.getCaret();
        logTextCaret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        new populateLog().execute();
        java.net.URL imgURL = LogFrame.class.getResource("/org/mitre/opensextant/desktop/icons/logo.png");
        if (imgURL != null) {
            this.setIconImage(new ImageIcon(imgURL, "Icon").getImage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        infoCheckBox = new javax.swing.JCheckBox();
        debugCheckBox = new javax.swing.JCheckBox();
        errorCheckBox = new javax.swing.JCheckBox();
        snapScrollCheckBox = new javax.swing.JCheckBox();
        logTypeLabel = new java.awt.Label();
        jScrollPane1 = new javax.swing.JScrollPane();
        logJTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Application Log");

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        infoCheckBox.setSelected(true);
        infoCheckBox.setText("Info");
        infoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoCheckBoxActionPerformed(evt);
            }
        });

        debugCheckBox.setSelected(true);
        debugCheckBox.setText("Debug");
        debugCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                debugCheckBoxStateChanged(evt);
            }
        });

        errorCheckBox.setSelected(true);
        errorCheckBox.setText("Error");
        errorCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                errorCheckBoxStateChanged(evt);
            }
        });

        snapScrollCheckBox.setSelected(true);
        snapScrollCheckBox.setText("Snap Scroll");
        snapScrollCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                snapScrollCheckBoxStateChanged(evt);
            }
        });

        logTypeLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        logTypeLabel.setText("Log Type:");

        logJTextArea.setEditable(false);
        logJTextArea.setColumns(20);
        logJTextArea.setRows(5);
        jScrollPane1.setViewportView(logJTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(logTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(debugCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(errorCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 422, Short.MAX_VALUE)
                .addComponent(closeButton)
                .addGap(24, 24, 24))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(snapScrollCheckBox)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(snapScrollCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(logTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(infoCheckBox)
                            .addComponent(debugCheckBox)
                            .addComponent(errorCheckBox))))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void snapScrollCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_snapScrollCheckBoxStateChanged
        // TODO add your handling code here:
                
    }//GEN-LAST:event_snapScrollCheckBoxStateChanged

    private void infoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoCheckBoxActionPerformed
        refillLog();
    }//GEN-LAST:event_infoCheckBoxActionPerformed

    private void debugCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_debugCheckBoxStateChanged
        refillLog();
    }//GEN-LAST:event_debugCheckBoxStateChanged

    private void errorCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_errorCheckBoxStateChanged
        refillLog();
    }//GEN-LAST:event_errorCheckBoxStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LogFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LogFrame().setVisible(true);
            }
        });
        
        
        
        
    }
    
    private void refillLog()
    {
        logJTextArea.setText("");
        
        BufferedReader br = null;
        try
        {
            br = new BufferedReader(new FileReader(logFileLocation));

            
            StringBuilder builder = new StringBuilder();

                while((aux = br.readLine()) != null)
                {
                    boolean infoIncluded = false;
                    boolean debugIncluded = false;
                    boolean errorIncluded = false;

                    if(aux.contains("INFO"))
                        infoIncluded = true;
                    else if(aux.contains("DEBUG"))
                        debugIncluded = true;
                    else if(aux.contains("ERROR"))
                        errorIncluded = true;

                    if(infoCheckBox.isSelected() && infoIncluded)
                        builder.append(aux + "\n");
                    else if(debugCheckBox.isSelected() && debugIncluded)
                        builder.append(aux + "\n");
                    else if(errorCheckBox.isSelected() && errorIncluded)
                        builder.append(aux + "\n");

                }

                logJTextArea.append(builder.toString());

            }
            catch(Exception e) { 
                e.printStackTrace();
            } finally {
                // close reader
                IOUtils.closeQuietly(br);
            }
    }
    
    class populateLog extends SwingWorker<Void, String> 
    {
        
        DefaultCaret logTextCaret = (DefaultCaret)logJTextArea.getCaret();
        FileReader reader = null;
        BufferedReader br = null;

        @Override
        public Void doInBackground() {
            try
            {
                reader = new FileReader(logFileLocation);
                br = new BufferedReader(reader);
                
                while(true)
                {
                    /**Check for highlighting**/
                    if(logTextCaret.isSelectionVisible())
                    {
                        logTextCaret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
                        snapScrollCheckBox.setSelected(false);
                    }
                    else
                    {
                        logTextCaret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
                        logJTextArea.setCaretPosition(logJTextArea.getLineStartOffset(logJTextArea.getLineCount() - 1));
                        snapScrollCheckBox.setSelected(true);
                    }
                    /**************************/
                    
                    /**Auto Scroll**/
                    if(snapScrollCheckBox.isSelected())
                    {
                        //Set the update policy to always update
                        logTextCaret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
                        //Scroll back down now that we have always update working for scroll
                        logJTextArea.setCaretPosition(logJTextArea.getLineStartOffset(logJTextArea.getLineCount() - 1));
                    }
                    else if(!snapScrollCheckBox.isSelected())
                        logTextCaret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
                    /***************/
                    
                    StringBuilder builder = new StringBuilder();
                    
                    while((aux = br.readLine()) != null)
                    {
                        boolean infoIncluded = false;
                        boolean debugIncluded = false;
                        boolean errorIncluded = false;
                        
                        if(aux.contains("INFO"))
                            infoIncluded = true;
                        else if(aux.contains("DEBUG"))
                            debugIncluded = true;
                        else if(aux.contains("ERROR"))
                            errorIncluded = true;
                        
                        if(infoCheckBox.isSelected() && infoIncluded)
                            builder.append(aux + "\n");
                        else if(debugCheckBox.isSelected() && debugIncluded)
                            builder.append(aux + "\n");
                        else if(errorCheckBox.isSelected() && errorIncluded)
                            builder.append(aux + "\n");
                            
                    }
                    
                    logJTextArea.append(builder.toString());
                    Thread.sleep(200); 
                }
                
            }
            catch(Exception e) { System.out.println(e); };

            return null;
        }

        @Override
        public void done() {
            try
            {
                //logJTextArea.read(br, null);
                //br.close();
                //reader.close();
            }
            catch(Exception e) { System.out.println(e); };

        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JCheckBox debugCheckBox;
    private javax.swing.JCheckBox errorCheckBox;
    private javax.swing.JCheckBox infoCheckBox;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea logJTextArea;
    private java.awt.Label logTypeLabel;
    private javax.swing.JCheckBox snapScrollCheckBox;
    // End of variables declaration//GEN-END:variables
}
