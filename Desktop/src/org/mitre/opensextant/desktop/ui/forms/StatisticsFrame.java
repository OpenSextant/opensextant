/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.mitre.opensextant.desktop.ui.forms;

import java.util.ArrayList;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;

import org.apache.commons.io.FileUtils;
import org.mitre.opensextant.desktop.ui.helpers.ViewHelper;
import org.mitre.opensextant.desktop.ui.table.OSRow;
import org.mitre.opensextant.desktop.util.FileSize;

/**
 *
 * @author RTWARNER
 */
@SuppressWarnings("serial")
public class StatisticsFrame extends javax.swing.JFrame {

    /**
     * Creates new form StatisticsFrame
     */
    private static OSRow currentRow;
    
    public StatisticsFrame(OSRow row) {
        initComponents();
        StatisticsFrame.currentRow = row;
        addRowInformation();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        informationTree = new javax.swing.JTree();

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        informationTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(informationTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 777, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatisticsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatisticsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatisticsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatisticsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StatisticsFrame(currentRow).setVisible(true);
            }
        });
    }
    
    public void addRowInformation()
    {
        ViewHelper.centerTheWindow(this);
        
        this.setTitle("Job Statistics");
        
        String fileSizeString = "";
        long bytesPerSecond = 0;
        ArrayList<String> fileSizes = new ArrayList<String>();
        if (currentRow.hasChildren()) {
                long size = 0;
                for (OSRow child : currentRow.getChildren()) {
                        size += FileUtils.sizeOf(child.getInputFile());
                        fileSizes.add(FileSize.byteCountToDisplaySize(FileUtils.sizeOf(child.getInputFile())));
                }
                bytesPerSecond = size/(currentRow.getDurationPanel().getDuration()/1000); 
                fileSizeString += FileSize.byteCountToDisplaySize(size);
                fileSizeString += " (" + currentRow.getChildren().size() + " files)";
        } else {
                long size = FileUtils.sizeOf(currentRow.getInputFile());
                fileSizeString += FileSize.byteCountToDisplaySize(size);
                bytesPerSecond = size/(currentRow.getDurationPanel().getDuration()/1000); 
        }
        
        
        /***Tree modification***/
        DefaultTreeModel model = (DefaultTreeModel)informationTree.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
        //root.removeAllChildren();
        model.setRoot(new DefaultMutableTreeNode(currentRow.getTitle()));
        root = (DefaultMutableTreeNode)model.getRoot();
        root.add(new DefaultMutableTreeNode("File Size: " + fileSizeString));
        root.add(new DefaultMutableTreeNode("Processing Rate: " + FileSize.byteCountToDisplaySize(bytesPerSecond) + "/sec"));
        root.add(new DefaultMutableTreeNode("Processing Time: " + currentRow.getDurationPanel().getDurationString()));
        
        if(!fileSizes.isEmpty())
        {
            DefaultMutableTreeNode fileTree = (DefaultMutableTreeNode) root.getChildAt(0);
            int i = 0;
            
            for(String string : fileSizes)
            {
                fileTree.add(new DefaultMutableTreeNode(currentRow.getChildren().get(i).getTitle() + " -- File Size: " + string));
                i++;
            }
        }
        
        DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) informationTree.getCellRenderer();
        renderer.setLeafIcon(null);
        //renderer.setOpenIcon(null);
        //renderer.setClosedIcon(null);
        
        model.reload(root);
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JTree informationTree;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
