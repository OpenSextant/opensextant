// -*- coding: utf-8 -*-
//				NOTICE
// This technical data was produced for the U. S. Government
// under Contract No. W15P7T-11-C-F600, and is
// subject to the Rights in Technical Data-Noncommercial Items
// clause at DFARS 252.227-7013 (NOV 1995)
//
//Copyright 2010-2012 The MITRE Corporation. All Rights Reserved.
//
//
// HISTORY
// =================
// 2012-07-19  MCU  added range test case for DD-01, DM-01, DMS-01
//                  "98 degrees" test: "98 44 009 N, 292 24 03 E  FAIL",  for example.
// 2012-08-08 MCU   removed notion that LONGITUDE is [01][0-7]\d   I don't rembember where I got that.
//                  [01]?\d\d is sufficient and validation of match will be done on all matches.  So these patterns can be simplified.
//                   0\d\d
//                   \d{1,3}, etc.
// 2012-10-10 MCU   Looking at DMS patterns abmiguities.  Order matters.  Flexpat 1.1 now preserves order of appearance 
//                  in this file.  First rule to fire a match will be considered best match, others with exact span will be duplicates.
// 
// 2012-11-26 MCU   DM and DMS patterns without hemisphere patterns are now supported.
//                  Truth data included as a CSV file. See OpenSextant GeocoderEval for source and scripts.
//
// 2012-01-05 MCU   Saw reports that had invisible 'guarded area marker char' (U+0096) as separator space between lat/lon 
//                  -- So latlonSep has range of allowable space or control chars U+0080 to U+00A0. 
// 
// Pattern guidelines:   use "\" not "\\" 
// To really mean "\\" -- escape a slash use <slash>
//
//Hemispheres
#DEFINE	hemiLat	[NSns]
#DEFINE	hemiLon	[EWew]

// "-" as first char is not a range char.
#DEFINE	hemiLatSign	[-+]
#DEFINE	hemiLonSign	[-+]
#DEFINE hemiLatPre      [-+NSns]
#DEFINE hemiLonPre      [-+EWew]

//space and punctuation
#DEFINE slash   \\
#DEFINE degSym   °

// LAT DM separator -- removed ".", as D.M is a decimal degree pattern.
// To specifically support D.M.S patterns best use a specific pattern for that one case.
// LAT SEPARATORS
#DEFINE dmLatSep   \s?DEG\s?|[-°:]\s?|\s
#DEFINE msLatSep   [-'´’′:.\s]
//#DEFINE secLatSep  ["'\u00B4\u2019\u201D\u2033\u2032\s]{1,2}

// LON SEPARATORS -- same as LAT
#DEFINE dmLonSep   \s?DEG\s?|[-°:]\s?|\s
#DEFINE msLonSep   [-'´’′:.\s]
//#DEFINE secLonSep   ["'\u00B4\u2019\u201D\u2033\u2032\s]{1,2}

#DEFINE secLatSep ["'´’”″′\s]{0,2}
#DEFINE secLonSep ["'´’”″′\s]{0,2}

#DEFINE latlonSep      [;,/|=x\s\u0080-\u00A0]
#DEFINE dmsSep         [-.:\s]

// SPACE: Coordinate patterns can break across lines ~ HTML, word docs, word wrapping, etc.
//  RULE: Allow no more than 3 whitespace chars in the general case; In some cases optional space may be worth testing
//#DEFINE	space	\\s{1,3}
//#DEFINE optSpace        \\s{0,3}

// Parts of a decimal degree Latitude/Longitude
#DEFINE	decDegLat	\d?\d\.\d{1,20}
#DEFINE	decDegLon	[0-1]?\d?\d\.\d{1,20}

// degree decimal minute lat/lon;  either:
// MM.m..., 
//  M.m..., 
//  M-mm is MIN-SEC, not MIN.DECMIN
// MM-mmm... 
//  M-mmm... 
//                NOT M-mm or MM-mm which implies Min/Sec, not decimal
#DEFINE	decMinLat	[0-5]?\d\.\d{1,20}
#DEFINE decMinLat3      [0-5]?\d[-.]\d{3,20}
#DEFINE	decMinLon	[0-5]?\d\.\d{1,20}
#DEFINE decMinLon3      [0-5]?\d[-.]\d{3,20}

// Difference between DMS fixed-width and variable lenght fields could be accomplished by these greedy matchers 
//  \d{1,2} or \d?, for example.
//  if 2 digits exist, then \d{1,2} will consume both, before matching next item in pattern.
//  Fear:  too many variable or optional items will lead to a lot of false positives.
//  Later if this framework proves to work we could consolidate the variable length and fixed length patterns back to a common pattern.
// For now trying to make this more accurate and explicit.

// Parts of a DMS latitude/Longitude
#DEFINE	degLat	\d{1,2}
#DEFINE	degLon	[01]?\d?\d

//Parts of a Degrees Minutes Seconds fractional seconds
#DEFINE	fractMinLat	[-\.]\d{1,6}
#DEFINE	fractMinLon	[-\.]\d{1,6}
#DEFINE	fractSecLat	\.\d{1,6}
#DEFINE	fractSecLon	\.\d{1,6}
#DEFINE	fractSecLatOpt	\.?\d{1,6}
#DEFINE	fractSecLonOpt	\.?\d{1,6}
#DEFINE	fractMinLat3	\d{3,6}
#DEFINE	fractMinLon3	\d{3,6}

// Fixed-length patterns
#DEFINE dmsDegLat  [0-8]\d
#DEFINE dmsDegLon  [01]\d\d
#DEFINE dmsMinLat  [0-5]\d
#DEFINE dmsMinLon  [0-5]\d
#DEFINE dmsSecLat  [0-5]\d
#DEFINE dmsSecLon  [0-5]\d

#DEFINE	minLat	[0-5]?\d
#DEFINE	secLat	[0-5]?\d
#DEFINE	minLon	[0-5]?\d
#DEFINE	secLon	[0-5]?\d


// Parts of an MGRS and UTM
#DEFINE	UTMBand	        [A-HJ-NP-Z]
#DEFINE	UTMZone 	[0-5]?\d
#DEFINE	MGRSQuad	[A-HJ-NP-Z][A-HJ-NP-V]
#DEFINE MGRSZone        [0-6]?\d\s?[C-HJ-NP-X]

// http://en.wikipedia.org/wiki/Universal_Transverse_Mercator
// UTM Easting is from 167,000 to 833,000 m
//     Northing is from   0 to 10,000,000 m ( <= 9,999,999m)
#DEFINE UTMEasting \d{6}
#DEFINE UTMNorthing \d{3,7}

// MGRS precision is 1m.  Quad is 100,000m sq so resolution is 5 digits + 5 digits with optional whitespace
// 99999n 99999e  -- in MGRS we never see "m" units or N/E denoted explicitly
// Occassionally, newlines or whitespace are interspersed in offset
// minimal:
// dd
// ddddd ddddd  with an additional one or two white spaces.   The offsets start and end with numbers. Only whitespace between is optional. 
// ddddd dddddd  additional digit in Easting  -- trailing 6th digit is a typo; trim off
// dddddd ddddd  additional digit in Northing -- trailing 6th digit is a typo; trim off
// ddddddddddd   Typo introduces ambiguity -- only correct thing is to split on halfway point +/- 1 digit and emit two answers
// 
// "precise" pattern is too precise.
#DEFINE Easting_Northing_Precise    \d{2,5}\s?\d{2,5}
#DEFINE Easting_Northing    \d[\s\d]{0,10}\d


//..........................................
//                      Decimal Degrees
//..........................................
#RULE   DD      TW      <hemiLatPre>?<decDegLat>\s*[,]\s*<hemiLonPre>?<decDegLon>
#TEST   DD      TW	UT: 42.3, +102.4
#TEST   DD      TW	UT: -42.3, -102.4

