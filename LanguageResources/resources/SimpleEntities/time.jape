/* 
Patterns for Time entities
 */

Imports: {
import static gate.Utils.*;
}


Phase:	Time
Input:	Token Number TimeUnit
Options: control = appelt



// 1234Z  12:34L
Rule: BasicTime
(
 (
  {Token.string ==~ "[0-9]{4}"}
    |
  ({Token.string ==~ "[0-9]{1,2}"}{Token.string == ":"}{Token.string ==~ "[0-9]{2}"}({Token.string == ":"}{Token.string ==~ "[0-9]{2}"})?)
  )
  {Token.string ==~ "[LZ]|local|Local|LOCAL|zulu|Zulu|ZULU|GMT|gmt|Gmt|am|AM|a.m.|A.M.|pm|PM|p.m.|P.M."}
)
:sent
-->
{
	gate.AnnotationSet sentSet = (gate.AnnotationSet)bindings.get("sent");
	Node sentStartNode = sentSet.firstNode(); 
	Node sentEndNode   = sentSet.lastNode();
 
	 gate.FeatureMap tempFeatures = Factory.newFeatureMap();
	 tempFeatures.put("rule",ruleName());
	 tempFeatures.put("string", stringFor(doc,sentSet));
	 tempFeatures.put("hierarchy","Time.time");
	 
	outputAS.add(sentStartNode, sentEndNode, "Time",tempFeatures);		
}


// 12 minutes, 34 years
Rule: LengthOfTime
(
		{Number} {TimeUnit}
)
:sent
-->
{
	gate.AnnotationSet sentSet = (gate.AnnotationSet)bindings.get("sent");
	Node sentStartNode = sentSet.firstNode(); 
	Node sentEndNode   = sentSet.lastNode();
 
	 gate.FeatureMap tempFeatures = Factory.newFeatureMap();
	 tempFeatures.put("rule",ruleName());
	 tempFeatures.put("string", stringFor(doc,sentSet));
	 tempFeatures.put("hierarchy","Time.lengthOfTime");
	 
	outputAS.add(sentStartNode, sentEndNode, "TimePeriod",tempFeatures);		
}


