Phase: SentenceChunking
Input: Token NounPhrase VerbPhrase PrepPhrase InfinitivePhrase Clause
Options: control = appelt

/*
Rule: Typing
(
	{Sentence}
)
:sent
-->
{
	gate.AnnotationSet sentSet = (gate.AnnotationSet)bindings.get("sent");
	gate.Annotation sent = (gate.Annotation)sentSet.iterator().next();
	gate.FeatureMap sentFeatures = Factory.newFeatureMap();
	Node startNode = sentSet.firstNode(); 
	Node endNode   = sentSet.lastNode();
	Long startOffset = startNode.getOffset();
	Long endOffset = endNode.getOffset();
	
	AnnotationSet vpSet = inputAS.get("VerbPhrase",startOffset,endOffset );
	int vpCount = vpSet.size();
	
	String phraseString = null;
	try{
		phraseString  = doc.getContent().getContent(startOffset, endOffset).toString().replaceAll("\\s+"," ");
	}catch(InvalidOffsetException e) {

	}

	if(phraseString != null){
		sentFeatures.put("phrase",phraseString);
	}
	
	
	if(vpCount == 0){
	    outputAS.add( startNode,endNode, "VP_0_Sentence", sentFeatures );
	}
	
	if(vpCount == 1){
	    outputAS.add( startNode,endNode, "VP_1_Sentence", sentFeatures );
	}
	
	
	if(vpCount == 2){
	    outputAS.add( startNode,endNode, "VP_2_Sentence", sentFeatures );
	}
	
	if(vpCount == 3){
	    outputAS.add( startNode,endNode, "VP_3_Sentence", sentFeatures );
	}
	
	
	if(vpCount == 4){
	    outputAS.add( startNode,endNode, "VP_4_Sentence", sentFeatures );
	}
	
	
	if(vpCount > 4){
	    outputAS.add( startNode,endNode, "VP_N_Sentence", sentFeatures );
	}
	
	
}
*/


Rule: Typing
(
	{Clause}
)
:cl
-->
{
	gate.AnnotationSet clauseSet = (gate.AnnotationSet)bindings.get("cl");
	gate.Annotation clause = (gate.Annotation)clauseSet.iterator().next();
	gate.FeatureMap clauseFeatures = clause.getFeatures();
	Node startNode = clauseSet.firstNode(); 
	Node endNode   = clauseSet.lastNode();
	Long startOffset = startNode.getOffset();
	Long endOffset = endNode.getOffset();
	
	
	//NounPhrase VerbPhrase PrepPhrase InfinitivePhrase 
	Set<String> phraseTypes =  new HashSet<String>();
	phraseTypes.add("NounPhrase"); //NP
	phraseTypes.add("VerbPhrase"); //VP
	phraseTypes.add("PrepPhrase"); //PP
	phraseTypes.add("InfinitivePhrase"); //INF
	/*phraseTypes.add("AdjectivePhrase"); //ADJ
	phraseTypes.add("PUNCT");*/  // PUNCT
	
	
	AnnotationSet phraseSet = inputAS.get(startOffset,endOffset).get(phraseTypes);
    
	List<Annotation> phraseList = new ArrayList<Annotation>();
	phraseList.addAll(phraseSet);
	 
	Collections.sort(phraseList, new OffsetComparator());
	
	 Iterator<Annotation> phraseIter = phraseList.iterator();
	
	 String clauseStruct = "";
	 String coreClauseStruct = "";
	 
	 Long currParsePoint = startOffset;
	 
	 while(phraseIter.hasNext()){
		Annotation tmpPhrase = phraseIter.next();
		gate.FeatureMap phFeatures = tmpPhrase.getFeatures();

		Long phStartOffset = tmpPhrase.getStartNode().getOffset();
		Long phEndOffset = tmpPhrase.getEndNode().getOffset();
		
		String gapString = "";
		try{
			gapString  = doc.getContent().getContent(currParsePoint, phStartOffset).toString().replaceAll("\\s+"," ").trim();
		}catch(InvalidOffsetException e) {

		}
		
		String phraseType = tmpPhrase.getType();
		String phraseCode = (String)phFeatures.get("code");
		
	
		clauseStruct = clauseStruct  + phraseCode + "_" ;


		currParsePoint = phEndOffset;
	 }
	 
	 
	 clauseStruct = clauseStruct.trim().replaceAll("^_","").replaceAll("_$","");
	 coreClauseStruct = clauseStruct.replaceAll("PP|INF|ADJ|PUNCT","").replaceAll("_+","_").replaceAll("^_","").replaceAll("_$","");
	 
	String phraseString = null;
	try{
		phraseString  = doc.getContent().getContent(startOffset, endOffset).toString().replaceAll("\\s+"," ");
	}catch(InvalidOffsetException e) {

	}

	if(phraseString != null){
		clauseFeatures.put("phrase",phraseString);
	}
	
	if(clauseStruct != null){
		clauseFeatures.put("coreClauseStruct",coreClauseStruct);
	}
	if(clauseStruct != null){
		clauseFeatures.put("clauseStruct",clauseStruct);
	}
	
	
}
