Phase: NounPhraseParts
Input: Token Number Entity noun_common noun_proper Identifier
Options: control = appelt


Rule: Prep
(
		{Token.pos ==IN }
)
:det
-->
	:det.tempPrep = {}


Rule: Determiner
(
		{Token.pos == ABL}| 
		{Token.pos == ABN }|
		{Token.pos == ABX }|
		{Token.pos == AP}| 
		{Token.pos == "AP$"}| 
		{Token.pos == AT }|
		{Token.pos == DT}| 
		{Token.pos == DTI}| 
		{Token.pos == DTS}| 
		{Token.pos == DTX }|
		{Token.pos == "PP$" }
)
:det
-->
	:det.tempNP_DET = {kind = "DET"}

Rule: HeadCompoundParticiple
(
		({Token.pos ==~"NP|NPS|NN|NS"}|{noun_common}|{noun_proper})
		{Token.pos == VBN}
		({Token.pos ==~"NP|NPS|NN|NS"}|{noun_common}|{noun_proper})
):head
-->
	:head.tempNP_HEAD = {kind = "HEAD_Simple",nounType = "compound"}


Rule: HeadSimpleCommon
(
		{Token.pos ==NN }|  // singular common
		{Token.pos ==NNS }| // plural common
		{noun_common}
):head
-->
	:head.tempNP_HEAD = {kind = "HEAD_Simple", nounType = "common"}

Rule: HeadSimpleProperEntity
(
		{Entity}|
		{noun_proper}|
		({Identifier})[1,3]
):head
-->
	:head.tempNP_HEAD = {kind = "HEAD_Simple",nounType = "proper"}


Rule: HeadSimpleProperPOS
(
		 {Token.pos ==NP }|  // singular proper		
		 {Token.pos ==NPS }| // plural proper
		({Token.pos ==TIC }{Token.pos ==NP }) // hack to handle arabic names

):head
-->
	:head.tempNP_HEAD = {kind = "HEAD_Simple",nounType = "proper"}



Rule: Modifier
(
		{Token.pos ==JJ }|
		{Token.pos ==JJR }|
		{Token.pos =="JJ$" }|
		{Token.pos ==JJS }|
		{Token.pos ==JJT }|
		{Token.pos ==CD }|
		{Token.pos ==OD }|
		{Token.pos =="PP$$" }|
		{Token.pos == RB}|
		{Token.pos == RBR}|
		{Token.pos == RBS}|
		{Token.pos == NN}|
		{Token.pos == NNS}|
		{Token.pos == NP}|
		{Token.pos == NPS}|
		({Token.pos == JJ}{Token.pos == ","}{Token.pos == JJ})|
		{Token.pos == VBN}|
		{Number}|
		{Entity}|
		{noun_common}|
		{noun_proper}|
		{Identifier}
):mod
-->
		:mod.tempNP_MOD = {kind = "MOD"}



Rule: PureModifier
(
		{Token.pos ==JJ }|
		{Token.pos ==JJR }|
		{Token.pos ==JJS }|
		{Token.pos ==JJT }|
		{Token.pos ==CD }|
		{Token.pos ==OD }|
		{Token.pos =="PP$$" }|
		({Token.pos == JJ}{Token.pos == ","}{Token.pos == JJ})|
		{Number}
):mod
-->
		:mod.tempADJ_MOD = {kind = "MOD"}






Rule: HeadPronoun
(
		{Token.pos == DTS}| // "these"
		{Token.pos ==PN }|
		{Token.pos =="PN$" }|
		{Token.pos ==PPO }|
		{Token.pos ==PPS }|
		{Token.pos ==PPSS }|
		{Token.pos ==PPLS }|
		{Token.pos ==PPL }

):head
-->
	:head.tempNP_HEAD = {kind = "HEAD_Pronoun",nounType = "pronoun"}


Rule: Conj
(
		{Token.pos == "CC" }|
		{Token.pos == "CS" }

):head
-->
	:head.tempConjunction = {kind = "Conjunction"}


