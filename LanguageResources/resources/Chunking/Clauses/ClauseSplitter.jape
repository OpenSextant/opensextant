Phase: ClauseSplitter
Input: Sentence SplitCandidateBetween 
Options: control = brill


//Split the sentence into clauses at the ClauseSplitPoint 
Rule:SplitSentenceIntoClause
(
		{Sentence}
):s
-->
{
	gate.AnnotationSet sentSet = ((gate.AnnotationSet)bindings.get("s")).get("Sentence");
	gate.Annotation sent = (gate.Annotation)sentSet.iterator().next();

	gate.FeatureMap sentFeatures =sent.getFeatures();
	Node sentStartNode = sent.getStartNode(); 
	Node sentEndNode   = sent.getEndNode();
	Long sentStartOffset = sentStartNode.getOffset();
	Long sentEndOffset = sentEndNode.getOffset();
	
	String docName = doc.getName();

	
	
	
	// get all split candidates in this sentence
	AnnotationSet splitSet = inputAS.get("ClauseSplitPoint",sentStartOffset,sentEndOffset );
	
	
	//if one or more splitspoints, create clauses between splitpoints
	// from start sentence to split1,
	// from split1 to split2,
	// from splitN to end sentence
	
	if(splitSet.size() >0){
		
		String splitType ="";
		String clauseType = "IND";
		
		List<Annotation> splitList = new ArrayList<Annotation>();
		splitList.addAll(splitSet);
		Collections.sort(splitList, new OffsetComparator());
		
		Iterator<Annotation> splitAnno = splitList.iterator();
		Long clauseStartOffset = sentStartOffset;
		Long clauseEndOffset;
		
		Integer totalClauses =  splitSet.size() +1;
		Integer clauseCount =0;
		
		
		while(splitAnno.hasNext()){
			gate.Annotation currSplit = (gate.Annotation)splitAnno.next();
			gate.FeatureMap currSplitFeatures = currSplit.getFeatures();
			splitType = (String)currSplitFeatures.get("type");
			Node splitStartNode = currSplit.getStartNode();
			Node splitEndNode   = currSplit.getEndNode();
			Long splitStartOffset = splitStartNode.getOffset();
			Long splitEndOffset = splitEndNode.getOffset();

			// split marker could be point or span (add type in ClauseSplitPoint?)
			// for now assume span = start of split marker to end of split marker
			Long splitRegionStart = splitStartOffset;
			Long splitRegionEnd = splitEndOffset;
			
			clauseEndOffset = splitRegionStart;

			if( clauseEndOffset - clauseStartOffset > 0 ){
				
				clauseCount++;
				// Adjust clause boundaries based on tokens contained within
				AnnotationSet tokenSet = inputAS.get("Token",clauseStartOffset,clauseEndOffset);
				if(tokenSet.size() >0){
					Node adjustedStartNode = tokenSet.firstNode();
					Node adjustedEndNode = tokenSet.lastNode();

					String phraseString = "";
					try{
						phraseString  = doc.getContent().getContent(adjustedStartNode.getOffset(),adjustedEndNode.getOffset()).toString().replaceAll("\\s+"," ");
					}catch(InvalidOffsetException e) {

					}

					gate.FeatureMap clauseFeatures = Factory.newFeatureMap();
					//clauseFeatures.putAll(sentFeatures);
					clauseFeatures.put("clauseSplitType","Split");
					if(phraseString != null){
						clauseFeatures.put("clauseString",phraseString);
					}
					clauseFeatures.put("clauseType",clauseType);
					clauseFeatures.put("document",docName);
					clauseFeatures.put("clauseStart",adjustedStartNode.getOffset().toString());
					clauseFeatures.put("clauseNumber",clauseCount);
					clauseFeatures.put("totalClauses",totalClauses);
					try{
					outputAS.add(adjustedStartNode.getOffset(), adjustedEndNode.getOffset(), "Clause",clauseFeatures);
					}catch(InvalidOffsetException e) {

					}
					// set start of next clause to end of this clause
					clauseStartOffset = clauseEndOffset;
					clauseType = splitType;
				}
			}else{
				System.out.println("Zero length clause in " + docName + " at " + clauseStartOffset.toString());
			}
	
			
		}// end split loop
		
		
		
		clauseEndOffset = sentEndOffset;

		if( clauseEndOffset - clauseStartOffset > 0 ){
			clauseCount++;

			// Adjust clause boundaries based on tokens contained within
			AnnotationSet tokenSet = inputAS.get("Token",clauseStartOffset,clauseEndOffset);
			if(tokenSet.size() >0){
				Node adjustedStartNode = tokenSet.firstNode();
				Node adjustedEndNode = tokenSet.lastNode();

				String phraseString = "";
				try{
					phraseString  = doc.getContent().getContent(adjustedStartNode.getOffset(),adjustedEndNode.getOffset()).toString().replaceAll("\\s+"," ");
				}catch(InvalidOffsetException e) {

				}

				gate.FeatureMap clauseFeatures = Factory.newFeatureMap();
				//clauseFeatures.putAll(sentFeatures);
				clauseFeatures.put("clauseSplitType","Split-Final");

				if(phraseString != null){
					clauseFeatures.put("clauseString",phraseString);
				}
				
				clauseFeatures.put("document",docName);
				clauseFeatures.put("clauseType",clauseType);
				clauseFeatures.put("clauseStart",adjustedStartNode.getOffset().toString());
				clauseFeatures.put("clauseNumber",clauseCount);
				clauseFeatures.put("totalClauses",totalClauses);
				try{
				outputAS.add(adjustedStartNode.getOffset(), adjustedEndNode.getOffset(), "Clause",clauseFeatures);
				}catch(InvalidOffsetException e) {

				}
				clauseStartOffset = clauseEndOffset;
			}
		}
		
		
	
	}else{  // no splits so whole sentence is clause
		gate.FeatureMap clauseFeatures = Factory.newFeatureMap();
		//clauseFeatures.putAll(sentFeatures);
		
		String phraseString = "";
		try{
			phraseString  = doc.getContent().getContent(sentStartNode.getOffset(),sentEndNode.getOffset()).toString().replaceAll("\\s+"," ");
		}catch(InvalidOffsetException e) {

		}

		clauseFeatures.put("clauseSplitType","NoSplit");
		clauseFeatures.put("clauseType","IND");
		clauseFeatures.put("document",docName);
		clauseFeatures.put("clauseStart",sentStartNode.getOffset().toString());
		clauseFeatures.put("clauseNumber",1);
		clauseFeatures.put("totalClauses",1);
		if(phraseString != null){
			clauseFeatures.put("clauseString",phraseString);
		}
		
		
		outputAS.add(sentStartNode, sentEndNode, "Clause",clauseFeatures);

	}
	
		
}

