
Phase: PP_Chunking
Input: Token NounPhrase tempPrep
Options: control = appelt

Rule: PrepPhase
(
		({tempPrep}):prep
		({NounPhrase}):np
):whole
-->
		{

			// get the whole PrepPhrase
			gate.AnnotationSet ppSet = (gate.AnnotationSet)bindings.get("whole");
			gate.Annotation pp = (gate.Annotation)ppSet.iterator().next();
			gate.FeatureMap ppFeatures = Factory.newFeatureMap();
			Node ppStartNode = ppSet.firstNode(); 
			Node ppEndNode   = ppSet.lastNode();
			
			// get the embedded NP
			gate.AnnotationSet npSet = (gate.AnnotationSet)bindings.get("np");
			gate.Annotation np = (gate.Annotation)npSet.iterator().next();
			gate.FeatureMap npFeatures = np.getFeatures();
			Node npStartNode = npSet.firstNode(); 
			Node npEndNode   = npSet.lastNode();
			
			

			String ppPhraseString = null;
			try{
				ppPhraseString  = doc.getContent().getContent(ppStartNode.getOffset(), ppEndNode.getOffset()).toString().replaceAll("\\s+"," ");
			}catch(InvalidOffsetException e) {

			}

			if(ppPhraseString != null){
				ppFeatures.put("PP",ppPhraseString);
			}

			// get the preposition
			gate.AnnotationSet prepSet = (gate.AnnotationSet)bindings.get("prep");
			if(prepSet != null){
			gate.Annotation prep = (gate.Annotation)prepSet.iterator().next();
			Node prepStartNode = prepSet.firstNode(); 
			Node prepEndNode   = prepSet.lastNode();

			String prepPhraseString = null;
			try{
				prepPhraseString  = doc.getContent().getContent(prepStartNode.getOffset(), prepEndNode.getOffset()).toString().replaceAll("\\s+"," ");
			}catch(InvalidOffsetException e) {

			}

			if(prepPhraseString != null){
				ppFeatures.put("PREP",prepPhraseString);
			}
			}else{
				ppFeatures.put("PREP","");
			}
			
	
			// copy the desired features from the embedded NP
			
			ppFeatures.put("DET",(String)npFeatures.get("DET"));
			ppFeatures.put("MOD",(String)npFeatures.get("MOD"));
			ppFeatures.put("HEAD",(String)npFeatures.get("HEAD"));
			ppFeatures.put("NP_phrase",(String)npFeatures.get("NP"));
	
			ppFeatures.put("code","PP");
			
			//remove the NP
			outputAS.remove(np);
			
			
    outputAS.add( ppStartNode,ppEndNode, "PrepPhrase", ppFeatures );

}



	