Phase: Diagnosis
Input: Token NounPhrase VerbPhrase PrepPhrase InfinitivePhrase 
Options: control = appelt


//All tokens should be in exactly one phrase
Rule: Omissions
(
		{Token.kind == "word"}
)
:t
-->
{
	gate.AnnotationSet tSet = (gate.AnnotationSet)bindings.get("t");
	gate.Annotation t = (gate.Annotation)tSet.iterator().next();
	gate.FeatureMap origFeatures = t.getFeatures();
	
	gate.FeatureMap tFeatures = Factory.newFeatureMap();
	tFeatures.putAll(origFeatures);
	
	
	Node startNode = tSet.firstNode(); 
	Node endNode   = tSet.lastNode();
	Long startOffset = startNode.getOffset();
	Long endOffset = endNode.getOffset();
	
	//NounPhrase VerbPhrase PrepPhrase InfinitivePhrase 
	Set<String> phraseTypes =  new HashSet<String>();
	phraseTypes.add("NounPhrase");
	phraseTypes.add("VerbPhrase");
	phraseTypes.add("PrepPhrase");
	phraseTypes.add("InfinitivePhrase");
	
	AnnotationSet coveringSet = inputAS.getCovering("",startOffset,endOffset).get(phraseTypes);
	
	
	if(coveringSet.size() == 0 ){
	
	String phraseString = null;
	try{
		phraseString  = doc.getContent().getContent(startOffset, endOffset).toString().replaceAll("\\s+"," ");
	}catch(InvalidOffsetException e) {

	}

	if(phraseString != null){
		tFeatures.put("phrase",phraseString);
	}
	
	    outputAS.add( startNode,endNode, "OmmittedToken", tFeatures );
	}
	if(coveringSet.size() > 1 ){
		
		String phraseString = null;
		try{
			phraseString  = doc.getContent().getContent(startOffset, endOffset).toString().replaceAll("\\s+"," ");
		}catch(InvalidOffsetException e) {

		}

		if(phraseString != null){
			tFeatures.put("phrase",phraseString);
		}
		
		    outputAS.add( startNode,endNode, "OverlappedPhrase", tFeatures );
		}
	

	
}
